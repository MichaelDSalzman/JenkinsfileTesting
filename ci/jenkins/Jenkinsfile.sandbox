def slackLib
def sonarLib

def completedSteps = []

pipeline{
    agent any //TODO
  
    stages{
        stage("Init") {
            steps{
                // buildName "${GIT_BRANCH}"
                // buildDescription "Executed @ ${NODE_NAME}"

                echo "BRANCH IS ${GIT_BRANCH}"
                echo "========Running init========"
                script {
                    slackLib = load "ci/jenkins/slack.groovy"
                    sonarLib = load "ci/jenkins/sonar.groovy"
                }
            }
            post {
                success{
                    script {
                        completedSteps << "INIT"
                    }
                }
            }
        }
        stage("Install dependencies"){
            steps{
                echo "========Installing dependencies========"
                sh "npm install"
            }

            //TODO Leaving this as an example
            
            post {
                success{
                    script {
                        completedSteps << "INSTALL DEPENDENCIES"
                    }
                }
            }
        }
        stage("NexusIQ Scan"){
            steps{
                echo "========executing NexusIQ scan========"
            }
            post {
                success{
                    script {
                        completedSteps << "NEXUS SCAN"
                    }
                }
            }
        }
        stage("Unit test"){
            steps{
                echo "========executing unit tests======== ${params}"
                echo "Publishing report"
                publishHTML (target : [allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: 'reports',
                    reportFiles: 'report.html',
                    reportName: 'My Reports',
                    reportTitles: 'The Report'])
            }
            post {
                success{
                    script {
                        completedSteps << "UNIT TEST"
                    }
                }
            }
        }
        stage("SonarQube scan"){
            steps{
                echo "========executing SonarQube scan========"
                script {
                    sonarLib.scan({String message, List failures, String sonarDashboardUrl ->
                        slackLib.sendDetailedMessage(
                            "danger", 
                            "Sandbox build failed on branch $GIT_BRANCH",
                            "$BUILD_URL",
                            message,
                            [[title: "Report URL", value: sonarDashboardUrl]] + sonarLib.mapSonarFailureToSlackField(failures)
                        )
                        error message
                    })
                }
            }
            post {
                success{
                    script {
                        completedSteps << "SONAR SCAN"
                    }
                }
            }
        }
        stage("Package"){
            steps{
                echo "========Packaging======== ${params}"
            }
            post {
                success{
                    script {
                        completedSteps << "PACKAGE"
                    }
                }
            }
        }
    }
    post{
        always{
            echo "========always========"
        }
        success{
            echo "========pipeline executed successfully ========"
            script {
                slackLib.sendSuccessMessage(completedSteps.toString())
            }
        }
        failure{
            echo "========pipeline execution failed========"
            script {
                slackLib.sendFailureMessage("It failed")
            }
        }
    }
}
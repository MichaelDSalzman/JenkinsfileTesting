def slackLib
def sonarLib

pipeline{
    agent any //TODO
  
    stages{
        stage("Init") {
            steps{
                echo "BRANCH IS ${GIT_BRANCH}"
                echo "========Running init========"
                script {
                    slackLib = load "ci/jenkins/slack.groovy"
                    sonarLib = load "ci/jenkins/sonar.groovy"

                    // load "ci/jenkins/sandbox.groovy"

def readProperty =  { propName -> 

def name = "Mike2"
def name2 = "Tania2"
    def props = readProperties file: "ci/jenkins/sandbox.env", interpolate: true

echo "1"
echo props[propName]
echo "${props[propName]}"
    return props[propName]
}

def name = "Mike"
def name2 = "Tania"
def prop = readProperty("message")

echo "HERE WE GO: $prop"


load "ci/jenkins/test_interpolation.groovy"

def int1 = 1
def int2 = 2
def int3 = 3
def int4 = 4
echo interpolation_test


                    // def envLoader = load "ci/jenkins/envVarLoader.groovy"
                    // envLoader.loadEnvProps("sandbox")

                    // def props = readProperties file: "ci/jenkins/sandbox.env"
                    // keys = props.keySet()
                    // for (key in keys) {
                    //     value = props["${key}"]
                    //     env."${key}" = "$value"
                    // }


                }
            }
        }
        stage("Install dependencies"){
            steps{
                echo "========Installing dependencies========"
                sh "npm install"
            }
        }
        stage("NexusIQ Scan"){
            steps{
                echo "========executing NexusIQ scan========"
            }
        }
        stage("Unit test"){
            steps{
                echo "========executing unit tests======== ${params}"
                echo "Publishing report"
                publishHTML (target : [allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: 'reports',
                    reportFiles: 'report.html',
                    reportName: 'My Reports',
                    reportTitles: 'The Report'])
            }
        }
        stage("SonarQube scan"){
            steps{
                echo "========executing SonarQube scan========"
                script {

                    sonar_failure_fn = {String message, List failures, String sonarDashboardUrl ->
                        slackLib.sendDetailedMessage(
                            [
                                color: env.sonar_failure_slack_color, 
                                title: env.sonar_failure_slack_title,
                                title_link: env.sonar_failure_slack_title_link,
                                text: message,
                                fields: [[title: "Report URL", value: sonarDashboardUrl]] + sonarLib.mapSonarFailuresToSlackFields(failures)
                            ]
                        )
                        error message
                    }

                    sonarLib.scan(sonar_failure_fn)
                }
            }
        }
        stage("Package"){
            steps{
                echo "========Packaging======== ${params}"
            }
        }
    }
    post{
        always{
            echo "========always========"
        }
        success{
            echo "========pipeline executed successfully ========"
            script {
                slackLib.sendSuccessMessage("Sandbox build successful on branch $GIT_BRANCH")
            }
        }
        failure{
            echo "========pipeline execution failed========"
            //script {
                //slackLib.sendFailureMessage("It failed")
            //}
        }
    }
}
boolean isValidTag(String tag) {
    def versionPattern = /^[0-9]+\.[0-9]+\.[0-9]+$/
    return tag.trim() ==~ versionPattern
}

boolean isValidGitHash(String gitHash) {
  echo gitHash
  int successExitCode = 0
  def exitCode = sh (script: "git branch --contains $gitHash | grep main")
  echo "EXIT CODE $exitCode"
  return successExitCode == exitCode
}

pipeline{
    agent any
  parameters {
    string(name: 'VERSION_TAG', description: "Specify environment for setup", trim: true)
    gitParameter(name: 'GIT_HASH', type: 'PT_REVISION', description: 'sadfads', branch: 'origin/main', quickFilterEnabled: true, defaultValue: 'abc', branchFilter: '', selectedValue: 'NONE', sortMode: 'DESCENDING_SMART', tagFilter: '', useRepository: '', listSize: '0')
  }
    stages{
        stage("Init") {
          steps {
            // TODO setup git client so tags can be applied and pushed
            echo "INIT ENV"
          }
        }
        stage("Parameter verification") {
            steps {
                echo "========Verifying parameters========"
                script {
                    if (!isValidTag(params.VERSION_TAG)) {
                        error "INVALID TAG"
                    }

                    if(!isValidGitHash(params.GIT_HASH)) {
                      error "INVALID GIT HASH"
                    }
                }
            }
        }
        stage("Apply tag") {
          steps {
            script {
              sh "git tag ${params.VERSION_TAG} ${params.GIT_HASH} && git push --tags"
            }
          }
        }
        stage("Promote artifact to RELEASE") {
          steps {
            echo "DO THINGS"
            // Download the artifact...
            // Rename the artifact... webapp-${params.VERSION_TAG}.zip
            // Upload
          }
        }
    }
}